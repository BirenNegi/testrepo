//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOS.FileTransferService.DataContracts
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMetaData", Namespace="http://schemas.datacontract.org/2004/07/SOS.FileTransferService.DataContracts")]
    public partial class FileMetaData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreationTimeField;
        
        private bool ExistField;
        
        private string ExtensionField;
        
        private System.DateTime LastAccessTimeField;
        
        private System.DateTime LastWriteTimeField;
        
        private long LengthField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime
        {
            get
            {
                return this.CreationTimeField;
            }
            set
            {
                this.CreationTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Exist
        {
            get
            {
                return this.ExistField;
            }
            set
            {
                this.ExistField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension
        {
            get
            {
                return this.ExtensionField;
            }
            set
            {
                this.ExtensionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastAccessTime
        {
            get
            {
                return this.LastAccessTimeField;
            }
            set
            {
                this.LastAccessTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastWriteTime
        {
            get
            {
                return this.LastWriteTimeField;
            }
            set
            {
                this.LastWriteTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length
        {
            get
            {
                return this.LengthField;
            }
            set
            {
                this.LengthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
}
namespace SOS.FileTransferService.FaultContracts
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenericFault", Namespace="http://schemas.datacontract.org/2004/07/SOS.FileTransferService.FaultContracts")]
    public partial class GenericFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IFileTransferService")]
public interface IFileTransferService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/GetFile", ReplyAction="http://tempuri.org/IFileTransferService/GetFileResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SOS.FileTransferService.FaultContracts.GenericFault), Action="http://tempuri.org/IFileTransferService/GetFileGenericFaultFault", Name="GenericFault", Namespace="http://schemas.datacontract.org/2004/07/SOS.FileTransferService.FaultContracts")]
    FileResponse GetFile(FileRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/GetFile", ReplyAction="http://tempuri.org/IFileTransferService/GetFileResponse")]
    System.Threading.Tasks.Task<FileResponse> GetFileAsync(FileRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/PutFile", ReplyAction="http://tempuri.org/IFileTransferService/PutFileResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SOS.FileTransferService.FaultContracts.GenericFault), Action="http://tempuri.org/IFileTransferService/PutFileGenericFaultFault", Name="GenericFault", Namespace="http://schemas.datacontract.org/2004/07/SOS.FileTransferService.FaultContracts")]
    FileRequest PutFile(FileResponse request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/PutFile", ReplyAction="http://tempuri.org/IFileTransferService/PutFileResponse")]
    System.Threading.Tasks.Task<FileRequest> PutFileAsync(FileResponse request);
    
    // CODEGEN: Generating message contract since the operation DeleteFile is neither RPC nor document wrapped.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DeleteFile", ReplyAction="http://tempuri.org/IFileTransferService/DeleteFileResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SOS.FileTransferService.FaultContracts.GenericFault), Action="http://tempuri.org/IFileTransferService/DeleteFileGenericFaultFault", Name="GenericFault", Namespace="http://schemas.datacontract.org/2004/07/SOS.FileTransferService.FaultContracts")]
    DeleteFileResponse DeleteFile(FileRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DeleteFile", ReplyAction="http://tempuri.org/IFileTransferService/DeleteFileResponse")]
    System.Threading.Tasks.Task<DeleteFileResponse> DeleteFileAsync(FileRequest request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public string[] FilePath;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public string Login;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
    public bool MetaDataOnly;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
    public string Password;
    
    public FileRequest()
    {
    }
    
    public FileRequest(string[] FilePath, string Login, bool MetaDataOnly, string Password)
    {
        this.FilePath = FilePath;
        this.Login = Login;
        this.MetaDataOnly = MetaDataOnly;
        this.Password = Password;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileResponse
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public SOS.FileTransferService.DataContracts.FileMetaData MetaData;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public string Login;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public string Password;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
    public byte[] data;
    
    public FileResponse()
    {
    }
    
    public FileResponse(SOS.FileTransferService.DataContracts.FileMetaData MetaData, string Login, string Password, byte[] data)
    {
        this.MetaData = MetaData;
        this.Login = Login;
        this.Password = Password;
        this.data = data;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
public partial class DeleteFileResponse
{
    
    public DeleteFileResponse()
    {
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IFileTransferServiceChannel : IFileTransferService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class FileTransferServiceClient : System.ServiceModel.ClientBase<IFileTransferService>, IFileTransferService
{
    
    public FileTransferServiceClient()
    {
    }
    
    public FileTransferServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public FileTransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FileTransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FileTransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    FileResponse IFileTransferService.GetFile(FileRequest request)
    {
        return base.Channel.GetFile(request);
    }
    
    public SOS.FileTransferService.DataContracts.FileMetaData GetFile(string[] FilePath, ref string Login, bool MetaDataOnly, ref string Password, out byte[] data)
    {
        FileRequest inValue = new FileRequest();
        inValue.FilePath = FilePath;
        inValue.Login = Login;
        inValue.MetaDataOnly = MetaDataOnly;
        inValue.Password = Password;
        FileResponse retVal = ((IFileTransferService)(this)).GetFile(inValue);
        Login = retVal.Login;
        Password = retVal.Password;
        data = retVal.data;
        return retVal.MetaData;
    }
    
    public System.Threading.Tasks.Task<FileResponse> GetFileAsync(FileRequest request)
    {
        return base.Channel.GetFileAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    FileRequest IFileTransferService.PutFile(FileResponse request)
    {
        return base.Channel.PutFile(request);
    }
    
    public string[] PutFile(SOS.FileTransferService.DataContracts.FileMetaData MetaData, ref string Login, ref string Password, byte[] data, out bool MetaDataOnly)
    {
        FileResponse inValue = new FileResponse();
        inValue.MetaData = MetaData;
        inValue.Login = Login;
        inValue.Password = Password;
        inValue.data = data;
        FileRequest retVal = ((IFileTransferService)(this)).PutFile(inValue);
        Login = retVal.Login;
        MetaDataOnly = retVal.MetaDataOnly;
        Password = retVal.Password;
        return retVal.FilePath;
    }
    
    public System.Threading.Tasks.Task<FileRequest> PutFileAsync(FileResponse request)
    {
        return base.Channel.PutFileAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    DeleteFileResponse IFileTransferService.DeleteFile(FileRequest request)
    {
        return base.Channel.DeleteFile(request);
    }
    
    public void DeleteFile(string[] FilePath, string Login, bool MetaDataOnly, string Password)
    {
        FileRequest inValue = new FileRequest();
        inValue.FilePath = FilePath;
        inValue.Login = Login;
        inValue.MetaDataOnly = MetaDataOnly;
        inValue.Password = Password;
        DeleteFileResponse retVal = ((IFileTransferService)(this)).DeleteFile(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<DeleteFileResponse> IFileTransferService.DeleteFileAsync(FileRequest request)
    {
        return base.Channel.DeleteFileAsync(request);
    }
    
    public System.Threading.Tasks.Task<DeleteFileResponse> DeleteFileAsync(string[] FilePath, string Login, bool MetaDataOnly, string Password)
    {
        FileRequest inValue = new FileRequest();
        inValue.FilePath = FilePath;
        inValue.Login = Login;
        inValue.MetaDataOnly = MetaDataOnly;
        inValue.Password = Password;
        return ((IFileTransferService)(this)).DeleteFileAsync(inValue);
    }
}
